// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.3
// source: inventory/inventory.proto

package inventory

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	mi := &file_inventory_inventory_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{0}
}

type ResourceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResourceId) Reset() {
	*x = ResourceId{}
	mi := &file_inventory_inventory_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceId) ProtoMessage() {}

func (x *ResourceId) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceId.ProtoReflect.Descriptor instead.
func (*ResourceId) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SingleInventoryRequestDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlugUlid    string `protobuf:"bytes,1,opt,name=slug_ulid,json=slugUlid,proto3" json:"slug_ulid,omitempty"`
	InventoryId string `protobuf:"bytes,2,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
}

func (x *SingleInventoryRequestDetail) Reset() {
	*x = SingleInventoryRequestDetail{}
	mi := &file_inventory_inventory_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleInventoryRequestDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleInventoryRequestDetail) ProtoMessage() {}

func (x *SingleInventoryRequestDetail) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleInventoryRequestDetail.ProtoReflect.Descriptor instead.
func (*SingleInventoryRequestDetail) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *SingleInventoryRequestDetail) GetSlugUlid() string {
	if x != nil {
		return x.SlugUlid
	}
	return ""
}

func (x *SingleInventoryRequestDetail) GetInventoryId() string {
	if x != nil {
		return x.InventoryId
	}
	return ""
}

type PaginationParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PaginationParam) Reset() {
	*x = PaginationParam{}
	mi := &file_inventory_inventory_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationParam) ProtoMessage() {}

func (x *PaginationParam) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationParam.ProtoReflect.Descriptor instead.
func (*PaginationParam) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{3}
}

func (x *PaginationParam) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationParam) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetResourceWithIDAndPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *ResourceId      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pagination *PaginationParam `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetResourceWithIDAndPagination) Reset() {
	*x = GetResourceWithIDAndPagination{}
	mi := &file_inventory_inventory_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourceWithIDAndPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceWithIDAndPagination) ProtoMessage() {}

func (x *GetResourceWithIDAndPagination) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceWithIDAndPagination.ProtoReflect.Descriptor instead.
func (*GetResourceWithIDAndPagination) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *GetResourceWithIDAndPagination) GetId() *ResourceId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetResourceWithIDAndPagination) GetPagination() *PaginationParam {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// --------------------------------------------MESSAGE FOR GETTING USERS--------------------------------------------------//
// User message definition
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email          string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FirstName      string                 `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName       string                 `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone          string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Password       string                 `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"` // Optional: Include only if needed
	Verified       bool                   `protobuf:"varint,7,opt,name=verified,proto3" json:"verified,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAtHuman string                 `protobuf:"bytes,10,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,11,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable timestamp
	ProfileImg     *string                `protobuf:"bytes,12,opt,name=profile_img,json=profileImg,proto3,oneof" json:"profile_img,omitempty"`
	UserSlug       *string                `protobuf:"bytes,13,opt,name=user_slug,json=userSlug,proto3,oneof" json:"user_slug,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_inventory_inventory_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{5}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *User) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *User) GetProfileImg() string {
	if x != nil && x.ProfileImg != nil {
		return *x.ProfileImg
	}
	return ""
}

func (x *User) GetUserSlug() string {
	if x != nil && x.UserSlug != nil {
		return *x.UserSlug
	}
	return ""
}

// Response message containing a list of users
type UserListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserListResponse) Reset() {
	*x = UserListResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListResponse) ProtoMessage() {}

func (x *UserListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListResponse.ProtoReflect.Descriptor instead.
func (*UserListResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *UserListResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// --------------------------------------------FOR CREATEING INVENTORY--------------------------------------------------//
// Message to hold image
type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageData []byte `protobuf:"bytes,1,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"` //Binary data for each image
	ImageType string `protobuf:"bytes,2,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"` // MIME type
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	mi := &file_inventory_inventory_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *ImageData) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *ImageData) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

type CreateInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId      string       `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	SubCategoryId   string       `protobuf:"bytes,2,opt,name=sub_category_id,json=subCategoryId,proto3" json:"sub_category_id,omitempty"`
	CountryId       string       `protobuf:"bytes,3,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	StateId         string       `protobuf:"bytes,4,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	LgaId           string       `protobuf:"bytes,5,opt,name=lga_id,json=lgaId,proto3" json:"lga_id,omitempty"`
	Name            string       `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description     string       `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Images          []*ImageData `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
	UserId          string       `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OfferPrice      float64      `protobuf:"fixed64,10,opt,name=offer_price,json=offerPrice,proto3" json:"offer_price,omitempty"` // Changed to double
	ProductPurpose  string       `protobuf:"bytes,11,opt,name=product_purpose,json=productPurpose,proto3" json:"product_purpose,omitempty"`
	Quantity        float64      `protobuf:"fixed64,12,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsAvailable     string       `protobuf:"bytes,13,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	RentalDuration  string       `protobuf:"bytes,14,opt,name=rental_duration,json=rentalDuration,proto3" json:"rental_duration,omitempty"`
	SecurityDeposit float64      `protobuf:"fixed64,15,opt,name=security_deposit,json=securityDeposit,proto3" json:"security_deposit,omitempty"`
	Tags            string       `protobuf:"bytes,16,opt,name=tags,proto3" json:"tags,omitempty"`
	Metadata        string       `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Negotiable      string       `protobuf:"bytes,18,opt,name=negotiable,proto3" json:"negotiable,omitempty"`
	PrimaryImage    *ImageData   `protobuf:"bytes,19,opt,name=primary_image,json=primaryImage,proto3" json:"primary_image,omitempty"`
	MinimumPrice    float64      `protobuf:"fixed64,20,opt,name=minimum_price,json=minimumPrice,proto3" json:"minimum_price,omitempty"`
	Condition       string       `protobuf:"bytes,21,opt,name=condition,proto3" json:"condition,omitempty"`
	UsageGuide      string       `protobuf:"bytes,22,opt,name=usage_guide,json=usageGuide,proto3" json:"usage_guide,omitempty"`
	Included        string       `protobuf:"bytes,23,opt,name=included,proto3" json:"included,omitempty"`
}

func (x *CreateInventoryRequest) Reset() {
	*x = CreateInventoryRequest{}
	mi := &file_inventory_inventory_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryRequest) ProtoMessage() {}

func (x *CreateInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryRequest.ProtoReflect.Descriptor instead.
func (*CreateInventoryRequest) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *CreateInventoryRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *CreateInventoryRequest) GetSubCategoryId() string {
	if x != nil {
		return x.SubCategoryId
	}
	return ""
}

func (x *CreateInventoryRequest) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *CreateInventoryRequest) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

func (x *CreateInventoryRequest) GetLgaId() string {
	if x != nil {
		return x.LgaId
	}
	return ""
}

func (x *CreateInventoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInventoryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateInventoryRequest) GetImages() []*ImageData {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateInventoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateInventoryRequest) GetOfferPrice() float64 {
	if x != nil {
		return x.OfferPrice
	}
	return 0
}

func (x *CreateInventoryRequest) GetProductPurpose() string {
	if x != nil {
		return x.ProductPurpose
	}
	return ""
}

func (x *CreateInventoryRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateInventoryRequest) GetIsAvailable() string {
	if x != nil {
		return x.IsAvailable
	}
	return ""
}

func (x *CreateInventoryRequest) GetRentalDuration() string {
	if x != nil {
		return x.RentalDuration
	}
	return ""
}

func (x *CreateInventoryRequest) GetSecurityDeposit() float64 {
	if x != nil {
		return x.SecurityDeposit
	}
	return 0
}

func (x *CreateInventoryRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *CreateInventoryRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CreateInventoryRequest) GetNegotiable() string {
	if x != nil {
		return x.Negotiable
	}
	return ""
}

func (x *CreateInventoryRequest) GetPrimaryImage() *ImageData {
	if x != nil {
		return x.PrimaryImage
	}
	return nil
}

func (x *CreateInventoryRequest) GetMinimumPrice() float64 {
	if x != nil {
		return x.MinimumPrice
	}
	return 0
}

func (x *CreateInventoryRequest) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *CreateInventoryRequest) GetUsageGuide() string {
	if x != nil {
		return x.UsageGuide
	}
	return ""
}

func (x *CreateInventoryRequest) GetIncluded() string {
	if x != nil {
		return x.Included
	}
	return ""
}

type CreateInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StatusCode int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Error      bool   `protobuf:"varint,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateInventoryResponse) Reset() {
	*x = CreateInventoryResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInventoryResponse) ProtoMessage() {}

func (x *CreateInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInventoryResponse.ProtoReflect.Descriptor instead.
func (*CreateInventoryResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *CreateInventoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateInventoryResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CreateInventoryResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

// --------------------------------------------INVENTORY CATEGORY MESSAGE--------------------------------------------------//
type CategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IconClass      string                 `protobuf:"bytes,4,opt,name=icon_class,json=iconClass,proto3" json:"icon_class,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAtHuman string                 `protobuf:"bytes,7,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,8,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable timestamp
	StatusCode     int32                  `protobuf:"varint,9,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	CategorySlug   string                 `protobuf:"bytes,10,opt,name=category_slug,json=categorySlug,proto3" json:"category_slug,omitempty"`
	Subcategories  []*SubCategoryResponse `protobuf:"bytes,11,rep,name=subcategories,proto3" json:"subcategories,omitempty"`
	InventoryCount *int32                 `protobuf:"varint,12,opt,name=inventory_count,json=inventoryCount,proto3,oneof" json:"inventory_count,omitempty"`
}

func (x *CategoryResponse) Reset() {
	*x = CategoryResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryResponse) ProtoMessage() {}

func (x *CategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryResponse.ProtoReflect.Descriptor instead.
func (*CategoryResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{10}
}

func (x *CategoryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CategoryResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CategoryResponse) GetIconClass() string {
	if x != nil {
		return x.IconClass
	}
	return ""
}

func (x *CategoryResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CategoryResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CategoryResponse) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *CategoryResponse) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *CategoryResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CategoryResponse) GetCategorySlug() string {
	if x != nil {
		return x.CategorySlug
	}
	return ""
}

func (x *CategoryResponse) GetSubcategories() []*SubCategoryResponse {
	if x != nil {
		return x.Subcategories
	}
	return nil
}

func (x *CategoryResponse) GetInventoryCount() int32 {
	if x != nil && x.InventoryCount != nil {
		return *x.InventoryCount
	}
	return 0
}

type SubCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CategoryId      string                 `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	IconClass       string                 `protobuf:"bytes,5,opt,name=icon_class,json=iconClass,proto3" json:"icon_class,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAtHuman  string                 `protobuf:"bytes,8,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable timestamp
	UpdatedAtHuman  string                 `protobuf:"bytes,9,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable timestamp
	StatusCode      int32                  `protobuf:"varint,10,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	SubcategorySlug string                 `protobuf:"bytes,11,opt,name=subcategory_slug,json=subcategorySlug,proto3" json:"subcategory_slug,omitempty"`
	InventoryCount  *int32                 `protobuf:"varint,12,opt,name=inventory_count,json=inventoryCount,proto3,oneof" json:"inventory_count,omitempty"`
}

func (x *SubCategoryResponse) Reset() {
	*x = SubCategoryResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCategoryResponse) ProtoMessage() {}

func (x *SubCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCategoryResponse.ProtoReflect.Descriptor instead.
func (*SubCategoryResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{11}
}

func (x *SubCategoryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubCategoryResponse) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *SubCategoryResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubCategoryResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubCategoryResponse) GetIconClass() string {
	if x != nil {
		return x.IconClass
	}
	return ""
}

func (x *SubCategoryResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SubCategoryResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SubCategoryResponse) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *SubCategoryResponse) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *SubCategoryResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *SubCategoryResponse) GetSubcategorySlug() string {
	if x != nil {
		return x.SubcategorySlug
	}
	return ""
}

func (x *SubCategoryResponse) GetInventoryCount() int32 {
	if x != nil && x.InventoryCount != nil {
		return *x.InventoryCount
	}
	return 0
}

type AllCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*CategoryResponse `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	StatusCode int32               `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *AllCategoryResponse) Reset() {
	*x = AllCategoryResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCategoryResponse) ProtoMessage() {}

func (x *AllCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCategoryResponse.ProtoReflect.Descriptor instead.
func (*AllCategoryResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{12}
}

func (x *AllCategoryResponse) GetCategories() []*CategoryResponse {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *AllCategoryResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type AllSubCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subcategories []*SubCategoryResponse `protobuf:"bytes,1,rep,name=subcategories,proto3" json:"subcategories,omitempty"`
	StatusCode    int32                  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
}

func (x *AllSubCategoryResponse) Reset() {
	*x = AllSubCategoryResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllSubCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSubCategoryResponse) ProtoMessage() {}

func (x *AllSubCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSubCategoryResponse.ProtoReflect.Descriptor instead.
func (*AllSubCategoryResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{13}
}

func (x *AllSubCategoryResponse) GetSubcategories() []*SubCategoryResponse {
	if x != nil {
		return x.Subcategories
	}
	return nil
}

func (x *AllSubCategoryResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type InventoryRatingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryId string `protobuf:"bytes,1,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
	Rating      int32  `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`
	Comment     string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	RaterId     string `protobuf:"bytes,4,opt,name=rater_id,json=raterId,proto3" json:"rater_id,omitempty"`
}

func (x *InventoryRatingRequest) Reset() {
	*x = InventoryRatingRequest{}
	mi := &file_inventory_inventory_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryRatingRequest) ProtoMessage() {}

func (x *InventoryRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryRatingRequest.ProtoReflect.Descriptor instead.
func (*InventoryRatingRequest) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{14}
}

func (x *InventoryRatingRequest) GetInventoryId() string {
	if x != nil {
		return x.InventoryId
	}
	return ""
}

func (x *InventoryRatingRequest) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *InventoryRatingRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *InventoryRatingRequest) GetRaterId() string {
	if x != nil {
		return x.RaterId
	}
	return ""
}

type InventoryRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InventoryId    string                          `protobuf:"bytes,2,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
	RaterId        string                          `protobuf:"bytes,3,opt,name=rater_id,json=raterId,proto3" json:"rater_id,omitempty"`
	Rating         int32                           `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Comment        string                          `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	UpdatedAt      *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt      *timestamppb.Timestamp          `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedAtHuman string                          `protobuf:"bytes,8,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable timestamp
	UpdatedAtHuman string                          `protobuf:"bytes,9,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"`
	Rater          *User                           `protobuf:"bytes,10,opt,name=rater,proto3" json:"rater,omitempty"`
	Replies        []*InventoryRatingReplyResponse `protobuf:"bytes,11,rep,name=replies,proto3" json:"replies,omitempty"`
}

func (x *InventoryRatingResponse) Reset() {
	*x = InventoryRatingResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryRatingResponse) ProtoMessage() {}

func (x *InventoryRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryRatingResponse.ProtoReflect.Descriptor instead.
func (*InventoryRatingResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{15}
}

func (x *InventoryRatingResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InventoryRatingResponse) GetInventoryId() string {
	if x != nil {
		return x.InventoryId
	}
	return ""
}

func (x *InventoryRatingResponse) GetRaterId() string {
	if x != nil {
		return x.RaterId
	}
	return ""
}

func (x *InventoryRatingResponse) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *InventoryRatingResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *InventoryRatingResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *InventoryRatingResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InventoryRatingResponse) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *InventoryRatingResponse) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *InventoryRatingResponse) GetRater() *User {
	if x != nil {
		return x.Rater
	}
	return nil
}

func (x *InventoryRatingResponse) GetReplies() []*InventoryRatingReplyResponse {
	if x != nil {
		return x.Replies
	}
	return nil
}

type UserRatingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Rating  int32  `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	RaterId string `protobuf:"bytes,4,opt,name=rater_id,json=raterId,proto3" json:"rater_id,omitempty"`
}

func (x *UserRatingRequest) Reset() {
	*x = UserRatingRequest{}
	mi := &file_inventory_inventory_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRatingRequest) ProtoMessage() {}

func (x *UserRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRatingRequest.ProtoReflect.Descriptor instead.
func (*UserRatingRequest) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{16}
}

func (x *UserRatingRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRatingRequest) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserRatingRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UserRatingRequest) GetRaterId() string {
	if x != nil {
		return x.RaterId
	}
	return ""
}

type UserRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RaterId        string                 `protobuf:"bytes,3,opt,name=rater_id,json=raterId,proto3" json:"rater_id,omitempty"`
	Rating         int32                  `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Comment        string                 `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedAtHuman string                 `protobuf:"bytes,8,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,9,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"`
	Rater          *User                  `protobuf:"bytes,10,opt,name=rater,proto3" json:"rater,omitempty"`
}

func (x *UserRatingResponse) Reset() {
	*x = UserRatingResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRatingResponse) ProtoMessage() {}

func (x *UserRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRatingResponse.ProtoReflect.Descriptor instead.
func (*UserRatingResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{17}
}

func (x *UserRatingResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserRatingResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRatingResponse) GetRaterId() string {
	if x != nil {
		return x.RaterId
	}
	return ""
}

func (x *UserRatingResponse) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserRatingResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UserRatingResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserRatingResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserRatingResponse) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *UserRatingResponse) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *UserRatingResponse) GetRater() *User {
	if x != nil {
		return x.Rater
	}
	return nil
}

type InventoryResponseDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InventoryResponse inventory = 1;
	Inventory   *Inventory           `protobuf:"bytes,1,opt,name=inventory,proto3" json:"inventory,omitempty"`
	User        *User                `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Images      []*InventoryImage    `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
	Country     *Country             `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Lga         *LGA                 `protobuf:"bytes,5,opt,name=lga,proto3" json:"lga,omitempty"`
	State       *State               `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Category    *CategoryResponse    `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	Subcategory *SubCategoryResponse `protobuf:"bytes,8,opt,name=subcategory,proto3" json:"subcategory,omitempty"`
}

func (x *InventoryResponseDetail) Reset() {
	*x = InventoryResponseDetail{}
	mi := &file_inventory_inventory_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryResponseDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryResponseDetail) ProtoMessage() {}

func (x *InventoryResponseDetail) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryResponseDetail.ProtoReflect.Descriptor instead.
func (*InventoryResponseDetail) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{18}
}

func (x *InventoryResponseDetail) GetInventory() *Inventory {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *InventoryResponseDetail) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *InventoryResponseDetail) GetImages() []*InventoryImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *InventoryResponseDetail) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *InventoryResponseDetail) GetLga() *LGA {
	if x != nil {
		return x.Lga
	}
	return nil
}

func (x *InventoryResponseDetail) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *InventoryResponseDetail) GetCategory() *CategoryResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *InventoryResponseDetail) GetSubcategory() *SubCategoryResponse {
	if x != nil {
		return x.Subcategory
	}
	return nil
}

type InventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UserId          string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CategoryId      string                 `protobuf:"bytes,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	SubcategoryId   string                 `protobuf:"bytes,6,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
	Promoted        bool                   `protobuf:"varint,7,opt,name=promoted,proto3" json:"promoted,omitempty"`
	Deactivated     bool                   `protobuf:"varint,8,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedAtHuman  string                 `protobuf:"bytes,11,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"`
	UpdatedAtHuman  string                 `protobuf:"bytes,12,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"`
	OfferPrice      float64                `protobuf:"fixed64,13,opt,name=offer_price,json=offerPrice,proto3" json:"offer_price,omitempty"`
	StateSlug       string                 `protobuf:"bytes,14,opt,name=state_slug,json=stateSlug,proto3" json:"state_slug,omitempty"`
	CountrySlug     string                 `protobuf:"bytes,15,opt,name=country_slug,json=countrySlug,proto3" json:"country_slug,omitempty"`
	LgaSlug         string                 `protobuf:"bytes,16,opt,name=lga_slug,json=lgaSlug,proto3" json:"lga_slug,omitempty"`
	CategorySlug    string                 `protobuf:"bytes,17,opt,name=category_slug,json=categorySlug,proto3" json:"category_slug,omitempty"`
	SubcategorySlug string                 `protobuf:"bytes,18,opt,name=subcategory_slug,json=subcategorySlug,proto3" json:"subcategory_slug,omitempty"`
	ProductPurpose  string                 `protobuf:"bytes,19,opt,name=product_purpose,json=productPurpose,proto3" json:"product_purpose,omitempty"`
	Quantity        float64                `protobuf:"fixed64,20,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsAvailable     string                 `protobuf:"bytes,21,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	RentalDuration  string                 `protobuf:"bytes,22,opt,name=rental_duration,json=rentalDuration,proto3" json:"rental_duration,omitempty"`
	SecurityDeposit float64                `protobuf:"fixed64,23,opt,name=security_deposit,json=securityDeposit,proto3" json:"security_deposit,omitempty"`
	Tags            string                 `protobuf:"bytes,24,opt,name=tags,proto3" json:"tags,omitempty"`
	Metadata        string                 `protobuf:"bytes,25,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Negotiable      string                 `protobuf:"bytes,26,opt,name=negotiable,proto3" json:"negotiable,omitempty"`
	PrimaryImage    string                 `protobuf:"bytes,27,opt,name=primary_image,json=primaryImage,proto3" json:"primary_image,omitempty"`
	MinimumPrice    float64                `protobuf:"fixed64,28,opt,name=minimum_price,json=minimumPrice,proto3" json:"minimum_price,omitempty"`
}

func (x *InventoryResponse) Reset() {
	*x = InventoryResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryResponse) ProtoMessage() {}

func (x *InventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryResponse.ProtoReflect.Descriptor instead.
func (*InventoryResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{19}
}

func (x *InventoryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InventoryResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InventoryResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InventoryResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *InventoryResponse) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *InventoryResponse) GetSubcategoryId() string {
	if x != nil {
		return x.SubcategoryId
	}
	return ""
}

func (x *InventoryResponse) GetPromoted() bool {
	if x != nil {
		return x.Promoted
	}
	return false
}

func (x *InventoryResponse) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *InventoryResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *InventoryResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InventoryResponse) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *InventoryResponse) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *InventoryResponse) GetOfferPrice() float64 {
	if x != nil {
		return x.OfferPrice
	}
	return 0
}

func (x *InventoryResponse) GetStateSlug() string {
	if x != nil {
		return x.StateSlug
	}
	return ""
}

func (x *InventoryResponse) GetCountrySlug() string {
	if x != nil {
		return x.CountrySlug
	}
	return ""
}

func (x *InventoryResponse) GetLgaSlug() string {
	if x != nil {
		return x.LgaSlug
	}
	return ""
}

func (x *InventoryResponse) GetCategorySlug() string {
	if x != nil {
		return x.CategorySlug
	}
	return ""
}

func (x *InventoryResponse) GetSubcategorySlug() string {
	if x != nil {
		return x.SubcategorySlug
	}
	return ""
}

func (x *InventoryResponse) GetProductPurpose() string {
	if x != nil {
		return x.ProductPurpose
	}
	return ""
}

func (x *InventoryResponse) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *InventoryResponse) GetIsAvailable() string {
	if x != nil {
		return x.IsAvailable
	}
	return ""
}

func (x *InventoryResponse) GetRentalDuration() string {
	if x != nil {
		return x.RentalDuration
	}
	return ""
}

func (x *InventoryResponse) GetSecurityDeposit() float64 {
	if x != nil {
		return x.SecurityDeposit
	}
	return 0
}

func (x *InventoryResponse) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *InventoryResponse) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *InventoryResponse) GetNegotiable() string {
	if x != nil {
		return x.Negotiable
	}
	return ""
}

func (x *InventoryResponse) GetPrimaryImage() string {
	if x != nil {
		return x.PrimaryImage
	}
	return ""
}

func (x *InventoryResponse) GetMinimumPrice() float64 {
	if x != nil {
		return x.MinimumPrice
	}
	return 0
}

type UserRatingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRatings  []*UserRatingResponse `protobuf:"bytes,1,rep,name=user_ratings,json=userRatings,proto3" json:"user_ratings,omitempty"`
	PageDetail   *PaginationParam      `protobuf:"bytes,2,opt,name=page_detail,json=pageDetail,proto3" json:"page_detail,omitempty"`
	Total        int32                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	RatingSumary *RatingSummary        `protobuf:"bytes,4,opt,name=rating_sumary,json=ratingSumary,proto3" json:"rating_sumary,omitempty"`
}

func (x *UserRatingsResponse) Reset() {
	*x = UserRatingsResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRatingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRatingsResponse) ProtoMessage() {}

func (x *UserRatingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRatingsResponse.ProtoReflect.Descriptor instead.
func (*UserRatingsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{20}
}

func (x *UserRatingsResponse) GetUserRatings() []*UserRatingResponse {
	if x != nil {
		return x.UserRatings
	}
	return nil
}

func (x *UserRatingsResponse) GetPageDetail() *PaginationParam {
	if x != nil {
		return x.PageDetail
	}
	return nil
}

func (x *UserRatingsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserRatingsResponse) GetRatingSumary() *RatingSummary {
	if x != nil {
		return x.RatingSumary
	}
	return nil
}

type InventoryRatingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryRatings []*InventoryRatingResponse `protobuf:"bytes,1,rep,name=inventory_ratings,json=inventoryRatings,proto3" json:"inventory_ratings,omitempty"`
	PageDetail       *PaginationParam           `protobuf:"bytes,2,opt,name=page_detail,json=pageDetail,proto3" json:"page_detail,omitempty"`
	Total            int32                      `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	RatingSumary     *RatingSummary             `protobuf:"bytes,4,opt,name=rating_sumary,json=ratingSumary,proto3" json:"rating_sumary,omitempty"`
}

func (x *InventoryRatingsResponse) Reset() {
	*x = InventoryRatingsResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryRatingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryRatingsResponse) ProtoMessage() {}

func (x *InventoryRatingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryRatingsResponse.ProtoReflect.Descriptor instead.
func (*InventoryRatingsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{21}
}

func (x *InventoryRatingsResponse) GetInventoryRatings() []*InventoryRatingResponse {
	if x != nil {
		return x.InventoryRatings
	}
	return nil
}

func (x *InventoryRatingsResponse) GetPageDetail() *PaginationParam {
	if x != nil {
		return x.PageDetail
	}
	return nil
}

func (x *InventoryRatingsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *InventoryRatingsResponse) GetRatingSumary() *RatingSummary {
	if x != nil {
		return x.RatingSumary
	}
	return nil
}

type RatingSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiveStar      int32   `protobuf:"varint,1,opt,name=five_star,json=fiveStar,proto3" json:"five_star,omitempty"`
	FourStar      int32   `protobuf:"varint,2,opt,name=four_star,json=fourStar,proto3" json:"four_star,omitempty"`
	ThreeStar     int32   `protobuf:"varint,3,opt,name=three_star,json=threeStar,proto3" json:"three_star,omitempty"`
	TwoStar       int32   `protobuf:"varint,4,opt,name=two_star,json=twoStar,proto3" json:"two_star,omitempty"`
	OneStar       int32   `protobuf:"varint,5,opt,name=one_star,json=oneStar,proto3" json:"one_star,omitempty"`
	AverageRating float64 `protobuf:"fixed64,6,opt,name=average_rating,json=averageRating,proto3" json:"average_rating,omitempty"`
}

func (x *RatingSummary) Reset() {
	*x = RatingSummary{}
	mi := &file_inventory_inventory_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RatingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingSummary) ProtoMessage() {}

func (x *RatingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingSummary.ProtoReflect.Descriptor instead.
func (*RatingSummary) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{22}
}

func (x *RatingSummary) GetFiveStar() int32 {
	if x != nil {
		return x.FiveStar
	}
	return 0
}

func (x *RatingSummary) GetFourStar() int32 {
	if x != nil {
		return x.FourStar
	}
	return 0
}

func (x *RatingSummary) GetThreeStar() int32 {
	if x != nil {
		return x.ThreeStar
	}
	return 0
}

func (x *RatingSummary) GetTwoStar() int32 {
	if x != nil {
		return x.TwoStar
	}
	return 0
}

func (x *RatingSummary) GetOneStar() int32 {
	if x != nil {
		return x.OneStar
	}
	return 0
}

func (x *RatingSummary) GetAverageRating() float64 {
	if x != nil {
		return x.AverageRating
	}
	return 0
}

type ReplyToRatingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RatingId      string `protobuf:"bytes,1,opt,name=rating_id,json=ratingId,proto3" json:"rating_id,omitempty"`
	ReplierId     string `protobuf:"bytes,2,opt,name=replier_id,json=replierId,proto3" json:"replier_id,omitempty"`
	Comment       string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	ParentReplyId string `protobuf:"bytes,4,opt,name=parent_reply_id,json=parentReplyId,proto3" json:"parent_reply_id,omitempty"`
}

func (x *ReplyToRatingRequest) Reset() {
	*x = ReplyToRatingRequest{}
	mi := &file_inventory_inventory_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyToRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyToRatingRequest) ProtoMessage() {}

func (x *ReplyToRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyToRatingRequest.ProtoReflect.Descriptor instead.
func (*ReplyToRatingRequest) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{23}
}

func (x *ReplyToRatingRequest) GetRatingId() string {
	if x != nil {
		return x.RatingId
	}
	return ""
}

func (x *ReplyToRatingRequest) GetReplierId() string {
	if x != nil {
		return x.ReplierId
	}
	return ""
}

func (x *ReplyToRatingRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ReplyToRatingRequest) GetParentReplyId() string {
	if x != nil {
		return x.ParentReplyId
	}
	return ""
}

type ReplyToRatingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RatingId       string                 `protobuf:"bytes,2,opt,name=rating_id,json=ratingId,proto3" json:"rating_id,omitempty"`
	ReplierId      string                 `protobuf:"bytes,3,opt,name=replier_id,json=replierId,proto3" json:"replier_id,omitempty"`
	ParentReplyId  string                 `protobuf:"bytes,4,opt,name=parent_reply_id,json=parentReplyId,proto3" json:"parent_reply_id,omitempty"`
	Comment        string                 `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedAtHuman string                 `protobuf:"bytes,8,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"`
	UpdatedAtHuman string                 `protobuf:"bytes,9,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"`
}

func (x *ReplyToRatingResponse) Reset() {
	*x = ReplyToRatingResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplyToRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyToRatingResponse) ProtoMessage() {}

func (x *ReplyToRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyToRatingResponse.ProtoReflect.Descriptor instead.
func (*ReplyToRatingResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{24}
}

func (x *ReplyToRatingResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReplyToRatingResponse) GetRatingId() string {
	if x != nil {
		return x.RatingId
	}
	return ""
}

func (x *ReplyToRatingResponse) GetReplierId() string {
	if x != nil {
		return x.ReplierId
	}
	return ""
}

func (x *ReplyToRatingResponse) GetParentReplyId() string {
	if x != nil {
		return x.ParentReplyId
	}
	return ""
}

func (x *ReplyToRatingResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ReplyToRatingResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReplyToRatingResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReplyToRatingResponse) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *ReplyToRatingResponse) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

type InventoryRatingReplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                 // Reply ID
	ParentReplyId  string                 `protobuf:"bytes,2,opt,name=parent_reply_id,json=parentReplyId,proto3" json:"parent_reply_id,omitempty"`    // Parent reply ID (if nested)
	Comment        string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`                                       // Reply comment
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Reply creation timestamp
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                  // Reply updated timestamp
	CreatedAtHuman string                 `protobuf:"bytes,6,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable creation timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,7,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable updated timestamp
	Replier        *User                  `protobuf:"bytes,8,opt,name=replier,proto3" json:"replier,omitempty"`                                       // User details of the replier
}

func (x *InventoryRatingReplyResponse) Reset() {
	*x = InventoryRatingReplyResponse{}
	mi := &file_inventory_inventory_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryRatingReplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryRatingReplyResponse) ProtoMessage() {}

func (x *InventoryRatingReplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryRatingReplyResponse.ProtoReflect.Descriptor instead.
func (*InventoryRatingReplyResponse) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{25}
}

func (x *InventoryRatingReplyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InventoryRatingReplyResponse) GetParentReplyId() string {
	if x != nil {
		return x.ParentReplyId
	}
	return ""
}

func (x *InventoryRatingReplyResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *InventoryRatingReplyResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InventoryRatingReplyResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *InventoryRatingReplyResponse) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *InventoryRatingReplyResponse) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *InventoryRatingReplyResponse) GetReplier() *User {
	if x != nil {
		return x.Replier
	}
	return nil
}

// SearchPayload carries the filters and pagination for listing searches.
type SearchInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryId       string `protobuf:"bytes,1,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"` // UUID of the country
	StateId         string `protobuf:"bytes,2,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`       // UUID of the state
	LgaId           string `protobuf:"bytes,3,opt,name=lga_id,json=lgaId,proto3" json:"lga_id,omitempty"`             // UUID of the LGA
	Text            string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`                            // Full-text search query
	Limit           string `protobuf:"bytes,5,opt,name=limit,proto3" json:"limit,omitempty"`                          // Maximum number of results to return
	Offset          string `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`                        // Number of results to skip (for pagination)
	CategoryId      string `protobuf:"bytes,7,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	SubcategoryId   string `protobuf:"bytes,8,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
	Ulid            string `protobuf:"bytes,9,opt,name=ulid,proto3" json:"ulid,omitempty"`
	StateSlug       string `protobuf:"bytes,10,opt,name=state_slug,json=stateSlug,proto3" json:"state_slug,omitempty"`
	CountrySlug     string `protobuf:"bytes,11,opt,name=country_slug,json=countrySlug,proto3" json:"country_slug,omitempty"`
	LgaSlug         string `protobuf:"bytes,12,opt,name=lga_slug,json=lgaSlug,proto3" json:"lga_slug,omitempty"`
	CategorySlug    string `protobuf:"bytes,13,opt,name=category_slug,json=categorySlug,proto3" json:"category_slug,omitempty"`
	SubcategorySlug string `protobuf:"bytes,14,opt,name=subcategory_slug,json=subcategorySlug,proto3" json:"subcategory_slug,omitempty"`
	UserId          string `protobuf:"bytes,15,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ProductPurpose  string `protobuf:"bytes,16,opt,name=product_purpose,json=productPurpose,proto3" json:"product_purpose,omitempty"`
	UserSlug        string `protobuf:"bytes,17,opt,name=user_slug,json=userSlug,proto3" json:"user_slug,omitempty"`
}

func (x *SearchInventoryRequest) Reset() {
	*x = SearchInventoryRequest{}
	mi := &file_inventory_inventory_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchInventoryRequest) ProtoMessage() {}

func (x *SearchInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchInventoryRequest.ProtoReflect.Descriptor instead.
func (*SearchInventoryRequest) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{26}
}

func (x *SearchInventoryRequest) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *SearchInventoryRequest) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

func (x *SearchInventoryRequest) GetLgaId() string {
	if x != nil {
		return x.LgaId
	}
	return ""
}

func (x *SearchInventoryRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SearchInventoryRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *SearchInventoryRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *SearchInventoryRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *SearchInventoryRequest) GetSubcategoryId() string {
	if x != nil {
		return x.SubcategoryId
	}
	return ""
}

func (x *SearchInventoryRequest) GetUlid() string {
	if x != nil {
		return x.Ulid
	}
	return ""
}

func (x *SearchInventoryRequest) GetStateSlug() string {
	if x != nil {
		return x.StateSlug
	}
	return ""
}

func (x *SearchInventoryRequest) GetCountrySlug() string {
	if x != nil {
		return x.CountrySlug
	}
	return ""
}

func (x *SearchInventoryRequest) GetLgaSlug() string {
	if x != nil {
		return x.LgaSlug
	}
	return ""
}

func (x *SearchInventoryRequest) GetCategorySlug() string {
	if x != nil {
		return x.CategorySlug
	}
	return ""
}

func (x *SearchInventoryRequest) GetSubcategorySlug() string {
	if x != nil {
		return x.SubcategorySlug
	}
	return ""
}

func (x *SearchInventoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SearchInventoryRequest) GetProductPurpose() string {
	if x != nil {
		return x.ProductPurpose
	}
	return ""
}

func (x *SearchInventoryRequest) GetUserSlug() string {
	if x != nil {
		return x.UserSlug
	}
	return ""
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Reply creation timestamp
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                  // Reply updated timestamp
	CreatedAtHuman string                 `protobuf:"bytes,5,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable creation timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,6,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable updated timestamp
}

func (x *Country) Reset() {
	*x = Country{}
	mi := &file_inventory_inventory_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{27}
}

func (x *Country) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Country) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Country) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Country) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *Country) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code           string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	CountryId      string                 `protobuf:"bytes,4,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Reply creation timestamp
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                  // Reply updated timestamp
	CreatedAtHuman string                 `protobuf:"bytes,7,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable creation timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,8,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable updated timestamp
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_inventory_inventory_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{28}
}

func (x *State) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *State) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *State) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *State) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *State) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *State) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *State) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *State) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

type LGA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StateId        string                 `protobuf:"bytes,3,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // Reply creation timestamp
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                  // Reply updated timestamp
	CreatedAtHuman string                 `protobuf:"bytes,6,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable creation timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,7,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable updated timestamp
}

func (x *LGA) Reset() {
	*x = LGA{}
	mi := &file_inventory_inventory_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LGA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LGA) ProtoMessage() {}

func (x *LGA) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LGA.ProtoReflect.Descriptor instead.
func (*LGA) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{29}
}

func (x *LGA) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LGA) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LGA) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

func (x *LGA) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LGA) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LGA) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *LGA) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

// Represents an inventory item.
type Inventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // UUID of the inventory
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	UserId        string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // references User.id
	CategoryId    string                 `protobuf:"bytes,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	SubcategoryId string                 `protobuf:"bytes,6,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
	Promoted      bool                   `protobuf:"varint,7,opt,name=promoted,proto3" json:"promoted,omitempty"`
	Deactivated   bool                   `protobuf:"varint,8,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Foreign-key IDs
	CountryId string `protobuf:"bytes,11,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	StateId   string `protobuf:"bytes,12,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	LgaId     string `protobuf:"bytes,13,opt,name=lga_id,json=lgaId,proto3" json:"lga_id,omitempty"`
	// Rich objects
	Country           *Country                `protobuf:"bytes,14,opt,name=country,proto3" json:"country,omitempty"`
	State             *State                  `protobuf:"bytes,15,opt,name=state,proto3" json:"state,omitempty"`
	Lga               *LGA                    `protobuf:"bytes,16,opt,name=lga,proto3" json:"lga,omitempty"`
	Images            []*InventoryImage       `protobuf:"bytes,17,rep,name=images,proto3" json:"images,omitempty"`
	User              *User                   `protobuf:"bytes,18,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAtHuman    string                  `protobuf:"bytes,19,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable creation timestamp
	UpdatedAtHuman    string                  `protobuf:"bytes,20,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable updated timestamp
	Slug              string                  `protobuf:"bytes,21,opt,name=slug,proto3" json:"slug,omitempty"`
	Ulid              string                  `protobuf:"bytes,22,opt,name=ulid,proto3" json:"ulid,omitempty"`
	OfferPrice        float64                 `protobuf:"fixed64,23,opt,name=offer_price,json=offerPrice,proto3" json:"offer_price,omitempty"`
	StateSlug         string                  `protobuf:"bytes,24,opt,name=state_slug,json=stateSlug,proto3" json:"state_slug,omitempty"`
	CountrySlug       string                  `protobuf:"bytes,25,opt,name=country_slug,json=countrySlug,proto3" json:"country_slug,omitempty"`
	LgaSlug           string                  `protobuf:"bytes,26,opt,name=lga_slug,json=lgaSlug,proto3" json:"lga_slug,omitempty"`
	CategorySlug      string                  `protobuf:"bytes,27,opt,name=category_slug,json=categorySlug,proto3" json:"category_slug,omitempty"`
	SubcategorySlug   string                  `protobuf:"bytes,28,opt,name=subcategory_slug,json=subcategorySlug,proto3" json:"subcategory_slug,omitempty"`
	ProductPurpose    string                  `protobuf:"bytes,29,opt,name=product_purpose,json=productPurpose,proto3" json:"product_purpose,omitempty"`
	Quantity          float64                 `protobuf:"fixed64,30,opt,name=quantity,proto3" json:"quantity,omitempty"`
	IsAvailable       string                  `protobuf:"bytes,31,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
	RentalDuration    string                  `protobuf:"bytes,32,opt,name=rental_duration,json=rentalDuration,proto3" json:"rental_duration,omitempty"`
	SecurityDeposit   float64                 `protobuf:"fixed64,33,opt,name=security_deposit,json=securityDeposit,proto3" json:"security_deposit,omitempty"`
	Tags              *wrapperspb.StringValue `protobuf:"bytes,34,opt,name=tags,proto3" json:"tags,omitempty"`
	Metadata          *string                 `protobuf:"bytes,35,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Negotiable        string                  `protobuf:"bytes,36,opt,name=negotiable,proto3" json:"negotiable,omitempty"`
	PrimaryImage      string                  `protobuf:"bytes,37,opt,name=primary_image,json=primaryImage,proto3" json:"primary_image,omitempty"`
	MinimumPrice      float64                 `protobuf:"fixed64,38,opt,name=minimum_price,json=minimumPrice,proto3" json:"minimum_price,omitempty"`
	Category          *CategoryResponse       `protobuf:"bytes,39,opt,name=category,proto3" json:"category,omitempty"`
	SubCategory       *SubCategoryResponse    `protobuf:"bytes,40,opt,name=sub_category,json=subCategory,proto3" json:"sub_category,omitempty"`
	AverageRating     *float64                `protobuf:"fixed64,41,opt,name=average_rating,json=averageRating,proto3,oneof" json:"average_rating,omitempty"`
	TotalRatings      *int32                  `protobuf:"varint,42,opt,name=total_ratings,json=totalRatings,proto3,oneof" json:"total_ratings,omitempty"`
	UserVerified      *bool                   `protobuf:"varint,43,opt,name=user_verified,json=userVerified,proto3,oneof" json:"user_verified,omitempty"`
	TotalUserRating   *int32                  `protobuf:"varint,44,opt,name=total_user_rating,json=totalUserRating,proto3,oneof" json:"total_user_rating,omitempty"`
	AverageUserRating *float64                `protobuf:"fixed64,45,opt,name=average_user_rating,json=averageUserRating,proto3,oneof" json:"average_user_rating,omitempty"`
	Condition         *string                 `protobuf:"bytes,46,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	UsageGuide        *string                 `protobuf:"bytes,47,opt,name=usage_guide,json=usageGuide,proto3,oneof" json:"usage_guide,omitempty"`
	Included          *string                 `protobuf:"bytes,48,opt,name=included,proto3,oneof" json:"included,omitempty"`
	TotalUserListing  int32                   `protobuf:"varint,49,opt,name=total_user_listing,json=totalUserListing,proto3" json:"total_user_listing,omitempty"`
}

func (x *Inventory) Reset() {
	*x = Inventory{}
	mi := &file_inventory_inventory_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Inventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inventory) ProtoMessage() {}

func (x *Inventory) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inventory.ProtoReflect.Descriptor instead.
func (*Inventory) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{30}
}

func (x *Inventory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Inventory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Inventory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Inventory) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Inventory) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Inventory) GetSubcategoryId() string {
	if x != nil {
		return x.SubcategoryId
	}
	return ""
}

func (x *Inventory) GetPromoted() bool {
	if x != nil {
		return x.Promoted
	}
	return false
}

func (x *Inventory) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *Inventory) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Inventory) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Inventory) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *Inventory) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

func (x *Inventory) GetLgaId() string {
	if x != nil {
		return x.LgaId
	}
	return ""
}

func (x *Inventory) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Inventory) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Inventory) GetLga() *LGA {
	if x != nil {
		return x.Lga
	}
	return nil
}

func (x *Inventory) GetImages() []*InventoryImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Inventory) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Inventory) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *Inventory) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

func (x *Inventory) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Inventory) GetUlid() string {
	if x != nil {
		return x.Ulid
	}
	return ""
}

func (x *Inventory) GetOfferPrice() float64 {
	if x != nil {
		return x.OfferPrice
	}
	return 0
}

func (x *Inventory) GetStateSlug() string {
	if x != nil {
		return x.StateSlug
	}
	return ""
}

func (x *Inventory) GetCountrySlug() string {
	if x != nil {
		return x.CountrySlug
	}
	return ""
}

func (x *Inventory) GetLgaSlug() string {
	if x != nil {
		return x.LgaSlug
	}
	return ""
}

func (x *Inventory) GetCategorySlug() string {
	if x != nil {
		return x.CategorySlug
	}
	return ""
}

func (x *Inventory) GetSubcategorySlug() string {
	if x != nil {
		return x.SubcategorySlug
	}
	return ""
}

func (x *Inventory) GetProductPurpose() string {
	if x != nil {
		return x.ProductPurpose
	}
	return ""
}

func (x *Inventory) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Inventory) GetIsAvailable() string {
	if x != nil {
		return x.IsAvailable
	}
	return ""
}

func (x *Inventory) GetRentalDuration() string {
	if x != nil {
		return x.RentalDuration
	}
	return ""
}

func (x *Inventory) GetSecurityDeposit() float64 {
	if x != nil {
		return x.SecurityDeposit
	}
	return 0
}

func (x *Inventory) GetTags() *wrapperspb.StringValue {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Inventory) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *Inventory) GetNegotiable() string {
	if x != nil {
		return x.Negotiable
	}
	return ""
}

func (x *Inventory) GetPrimaryImage() string {
	if x != nil {
		return x.PrimaryImage
	}
	return ""
}

func (x *Inventory) GetMinimumPrice() float64 {
	if x != nil {
		return x.MinimumPrice
	}
	return 0
}

func (x *Inventory) GetCategory() *CategoryResponse {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Inventory) GetSubCategory() *SubCategoryResponse {
	if x != nil {
		return x.SubCategory
	}
	return nil
}

func (x *Inventory) GetAverageRating() float64 {
	if x != nil && x.AverageRating != nil {
		return *x.AverageRating
	}
	return 0
}

func (x *Inventory) GetTotalRatings() int32 {
	if x != nil && x.TotalRatings != nil {
		return *x.TotalRatings
	}
	return 0
}

func (x *Inventory) GetUserVerified() bool {
	if x != nil && x.UserVerified != nil {
		return *x.UserVerified
	}
	return false
}

func (x *Inventory) GetTotalUserRating() int32 {
	if x != nil && x.TotalUserRating != nil {
		return *x.TotalUserRating
	}
	return 0
}

func (x *Inventory) GetAverageUserRating() float64 {
	if x != nil && x.AverageUserRating != nil {
		return *x.AverageUserRating
	}
	return 0
}

func (x *Inventory) GetCondition() string {
	if x != nil && x.Condition != nil {
		return *x.Condition
	}
	return ""
}

func (x *Inventory) GetUsageGuide() string {
	if x != nil && x.UsageGuide != nil {
		return *x.UsageGuide
	}
	return ""
}

func (x *Inventory) GetIncluded() string {
	if x != nil && x.Included != nil {
		return *x.Included
	}
	return ""
}

func (x *Inventory) GetTotalUserListing() int32 {
	if x != nil {
		return x.TotalUserListing
	}
	return 0
}

// One image associated with an inventory item.
type InventoryImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LiveUrl        string                 `protobuf:"bytes,2,opt,name=live_url,json=liveUrl,proto3" json:"live_url,omitempty"`
	LocalUrl       string                 `protobuf:"bytes,3,opt,name=local_url,json=localUrl,proto3" json:"local_url,omitempty"`
	InventoryId    string                 `protobuf:"bytes,4,opt,name=inventory_id,json=inventoryId,proto3" json:"inventory_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAtHuman string                 `protobuf:"bytes,7,opt,name=created_at_human,json=createdAtHuman,proto3" json:"created_at_human,omitempty"` // Human-readable creation timestamp
	UpdatedAtHuman string                 `protobuf:"bytes,8,opt,name=updated_at_human,json=updatedAtHuman,proto3" json:"updated_at_human,omitempty"` // Human-readable updated timestamp
}

func (x *InventoryImage) Reset() {
	*x = InventoryImage{}
	mi := &file_inventory_inventory_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryImage) ProtoMessage() {}

func (x *InventoryImage) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryImage.ProtoReflect.Descriptor instead.
func (*InventoryImage) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{31}
}

func (x *InventoryImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InventoryImage) GetLiveUrl() string {
	if x != nil {
		return x.LiveUrl
	}
	return ""
}

func (x *InventoryImage) GetLocalUrl() string {
	if x != nil {
		return x.LocalUrl
	}
	return ""
}

func (x *InventoryImage) GetInventoryId() string {
	if x != nil {
		return x.InventoryId
	}
	return ""
}

func (x *InventoryImage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InventoryImage) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *InventoryImage) GetCreatedAtHuman() string {
	if x != nil {
		return x.CreatedAtHuman
	}
	return ""
}

func (x *InventoryImage) GetUpdatedAtHuman() string {
	if x != nil {
		return x.UpdatedAtHuman
	}
	return ""
}

// A paginated collection of Inventory items.
type InventoryCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of inventory records.
	Inventories []*Inventory `protobuf:"bytes,1,rep,name=inventories,proto3" json:"inventories,omitempty"`
	// Total number of matching inventories in the database.
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// The offset you used for this page (skip N rows).
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The max number of items you requested.
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *InventoryCollection) Reset() {
	*x = InventoryCollection{}
	mi := &file_inventory_inventory_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventoryCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryCollection) ProtoMessage() {}

func (x *InventoryCollection) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryCollection.ProtoReflect.Descriptor instead.
func (*InventoryCollection) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{32}
}

func (x *InventoryCollection) GetInventories() []*Inventory {
	if x != nil {
		return x.Inventories
	}
	return nil
}

func (x *InventoryCollection) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *InventoryCollection) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *InventoryCollection) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCategoryByIDPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId   string `protobuf:"bytes,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	CategorySlug string `protobuf:"bytes,2,opt,name=category_slug,json=categorySlug,proto3" json:"category_slug,omitempty"`
}

func (x *GetCategoryByIDPayload) Reset() {
	*x = GetCategoryByIDPayload{}
	mi := &file_inventory_inventory_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoryByIDPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryByIDPayload) ProtoMessage() {}

func (x *GetCategoryByIDPayload) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_inventory_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryByIDPayload.ProtoReflect.Descriptor instead.
func (*GetCategoryByIDPayload) Descriptor() ([]byte, []int) {
	return file_inventory_inventory_proto_rawDescGZIP(), []int{33}
}

func (x *GetCategoryByIDPayload) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *GetCategoryByIDPayload) GetCategorySlug() string {
	if x != nil {
		return x.CategorySlug
	}
	return ""
}

var File_inventory_inventory_proto protoreflect.FileDescriptor

var file_inventory_inventory_proto_rawDesc = []byte{
	0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x1c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x75, 0x67, 0x5f, 0x75, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x75, 0x67, 0x55, 0x6c,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x75, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x6d, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x75,
	0x67, 0x22, 0x39, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x97, 0x06, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x67, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x67, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x22, 0x6a, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8f, 0x04,
	0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x63,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xf3, 0x03, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x16, 0x41, 0x6c,
	0x6c, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x16,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcd, 0x03, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x05,
	0x72, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x72, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xfb, 0x02, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x72, 0x61, 0x74, 0x65, 0x72, 0x22,
	0x98, 0x03, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x6c, 0x67, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c,
	0x47, 0x41, 0x52, 0x03, 0x6c, 0x67, 0x61, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xe6, 0x07, 0x0a, 0x11, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x67, 0x61, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x67, 0x61, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0xfd, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0xc5, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x77,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x77,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x22, 0xef,
	0x02, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x22, 0xe5, 0x02, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x29, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x93, 0x04, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6c, 0x67, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x67, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6c,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x75,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x67, 0x61, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x67, 0x61, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x75, 0x67, 0x22, 0xf7,
	0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x22, 0x8e, 0x02, 0x0a, 0x03, 0x4c, 0x47, 0x41, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x22, 0xe1, 0x0f, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x67, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x67, 0x61, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x6c, 0x67, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x4c, 0x47,
	0x41, 0x52, 0x03, 0x6c, 0x67, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6c, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x67, 0x61, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x67, 0x61, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a,
	0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x11, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0a, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x22, 0x9c, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x5e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79,
	0x49, 0x44, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x32,
	0xba, 0x09, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x17,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1b, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0d, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x22, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x44, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54,
	0x6f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x62, 0x79, 0x6e, 0x6f,
	0x6e, 0x77, 0x61, 0x6e, 0x65, 0x2f, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inventory_inventory_proto_rawDescOnce sync.Once
	file_inventory_inventory_proto_rawDescData = file_inventory_inventory_proto_rawDesc
)

func file_inventory_inventory_proto_rawDescGZIP() []byte {
	file_inventory_inventory_proto_rawDescOnce.Do(func() {
		file_inventory_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_inventory_proto_rawDescData)
	})
	return file_inventory_inventory_proto_rawDescData
}

var file_inventory_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_inventory_inventory_proto_goTypes = []any{
	(*EmptyRequest)(nil),                   // 0: inventory.EmptyRequest
	(*ResourceId)(nil),                     // 1: inventory.ResourceId
	(*SingleInventoryRequestDetail)(nil),   // 2: inventory.SingleInventoryRequestDetail
	(*PaginationParam)(nil),                // 3: inventory.PaginationParam
	(*GetResourceWithIDAndPagination)(nil), // 4: inventory.GetResourceWithIDAndPagination
	(*User)(nil),                           // 5: inventory.User
	(*UserListResponse)(nil),               // 6: inventory.UserListResponse
	(*ImageData)(nil),                      // 7: inventory.ImageData
	(*CreateInventoryRequest)(nil),         // 8: inventory.CreateInventoryRequest
	(*CreateInventoryResponse)(nil),        // 9: inventory.CreateInventoryResponse
	(*CategoryResponse)(nil),               // 10: inventory.CategoryResponse
	(*SubCategoryResponse)(nil),            // 11: inventory.SubCategoryResponse
	(*AllCategoryResponse)(nil),            // 12: inventory.AllCategoryResponse
	(*AllSubCategoryResponse)(nil),         // 13: inventory.AllSubCategoryResponse
	(*InventoryRatingRequest)(nil),         // 14: inventory.InventoryRatingRequest
	(*InventoryRatingResponse)(nil),        // 15: inventory.InventoryRatingResponse
	(*UserRatingRequest)(nil),              // 16: inventory.UserRatingRequest
	(*UserRatingResponse)(nil),             // 17: inventory.UserRatingResponse
	(*InventoryResponseDetail)(nil),        // 18: inventory.InventoryResponseDetail
	(*InventoryResponse)(nil),              // 19: inventory.InventoryResponse
	(*UserRatingsResponse)(nil),            // 20: inventory.UserRatingsResponse
	(*InventoryRatingsResponse)(nil),       // 21: inventory.InventoryRatingsResponse
	(*RatingSummary)(nil),                  // 22: inventory.RatingSummary
	(*ReplyToRatingRequest)(nil),           // 23: inventory.ReplyToRatingRequest
	(*ReplyToRatingResponse)(nil),          // 24: inventory.ReplyToRatingResponse
	(*InventoryRatingReplyResponse)(nil),   // 25: inventory.InventoryRatingReplyResponse
	(*SearchInventoryRequest)(nil),         // 26: inventory.SearchInventoryRequest
	(*Country)(nil),                        // 27: inventory.Country
	(*State)(nil),                          // 28: inventory.State
	(*LGA)(nil),                            // 29: inventory.LGA
	(*Inventory)(nil),                      // 30: inventory.Inventory
	(*InventoryImage)(nil),                 // 31: inventory.InventoryImage
	(*InventoryCollection)(nil),            // 32: inventory.InventoryCollection
	(*GetCategoryByIDPayload)(nil),         // 33: inventory.GetCategoryByIDPayload
	(*timestamppb.Timestamp)(nil),          // 34: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),         // 35: google.protobuf.StringValue
}
var file_inventory_inventory_proto_depIdxs = []int32{
	1,  // 0: inventory.GetResourceWithIDAndPagination.id:type_name -> inventory.ResourceId
	3,  // 1: inventory.GetResourceWithIDAndPagination.pagination:type_name -> inventory.PaginationParam
	34, // 2: inventory.User.created_at:type_name -> google.protobuf.Timestamp
	34, // 3: inventory.User.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 4: inventory.UserListResponse.users:type_name -> inventory.User
	7,  // 5: inventory.CreateInventoryRequest.images:type_name -> inventory.ImageData
	7,  // 6: inventory.CreateInventoryRequest.primary_image:type_name -> inventory.ImageData
	34, // 7: inventory.CategoryResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 8: inventory.CategoryResponse.updated_at:type_name -> google.protobuf.Timestamp
	11, // 9: inventory.CategoryResponse.subcategories:type_name -> inventory.SubCategoryResponse
	34, // 10: inventory.SubCategoryResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 11: inventory.SubCategoryResponse.updated_at:type_name -> google.protobuf.Timestamp
	10, // 12: inventory.AllCategoryResponse.categories:type_name -> inventory.CategoryResponse
	11, // 13: inventory.AllSubCategoryResponse.subcategories:type_name -> inventory.SubCategoryResponse
	34, // 14: inventory.InventoryRatingResponse.updated_at:type_name -> google.protobuf.Timestamp
	34, // 15: inventory.InventoryRatingResponse.created_at:type_name -> google.protobuf.Timestamp
	5,  // 16: inventory.InventoryRatingResponse.rater:type_name -> inventory.User
	25, // 17: inventory.InventoryRatingResponse.replies:type_name -> inventory.InventoryRatingReplyResponse
	34, // 18: inventory.UserRatingResponse.updated_at:type_name -> google.protobuf.Timestamp
	34, // 19: inventory.UserRatingResponse.created_at:type_name -> google.protobuf.Timestamp
	5,  // 20: inventory.UserRatingResponse.rater:type_name -> inventory.User
	30, // 21: inventory.InventoryResponseDetail.inventory:type_name -> inventory.Inventory
	5,  // 22: inventory.InventoryResponseDetail.user:type_name -> inventory.User
	31, // 23: inventory.InventoryResponseDetail.images:type_name -> inventory.InventoryImage
	27, // 24: inventory.InventoryResponseDetail.country:type_name -> inventory.Country
	29, // 25: inventory.InventoryResponseDetail.lga:type_name -> inventory.LGA
	28, // 26: inventory.InventoryResponseDetail.state:type_name -> inventory.State
	10, // 27: inventory.InventoryResponseDetail.category:type_name -> inventory.CategoryResponse
	11, // 28: inventory.InventoryResponseDetail.subcategory:type_name -> inventory.SubCategoryResponse
	34, // 29: inventory.InventoryResponse.updated_at:type_name -> google.protobuf.Timestamp
	34, // 30: inventory.InventoryResponse.created_at:type_name -> google.protobuf.Timestamp
	17, // 31: inventory.UserRatingsResponse.user_ratings:type_name -> inventory.UserRatingResponse
	3,  // 32: inventory.UserRatingsResponse.page_detail:type_name -> inventory.PaginationParam
	22, // 33: inventory.UserRatingsResponse.rating_sumary:type_name -> inventory.RatingSummary
	15, // 34: inventory.InventoryRatingsResponse.inventory_ratings:type_name -> inventory.InventoryRatingResponse
	3,  // 35: inventory.InventoryRatingsResponse.page_detail:type_name -> inventory.PaginationParam
	22, // 36: inventory.InventoryRatingsResponse.rating_sumary:type_name -> inventory.RatingSummary
	34, // 37: inventory.ReplyToRatingResponse.updated_at:type_name -> google.protobuf.Timestamp
	34, // 38: inventory.ReplyToRatingResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 39: inventory.InventoryRatingReplyResponse.created_at:type_name -> google.protobuf.Timestamp
	34, // 40: inventory.InventoryRatingReplyResponse.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 41: inventory.InventoryRatingReplyResponse.replier:type_name -> inventory.User
	34, // 42: inventory.Country.created_at:type_name -> google.protobuf.Timestamp
	34, // 43: inventory.Country.updated_at:type_name -> google.protobuf.Timestamp
	34, // 44: inventory.State.created_at:type_name -> google.protobuf.Timestamp
	34, // 45: inventory.State.updated_at:type_name -> google.protobuf.Timestamp
	34, // 46: inventory.LGA.created_at:type_name -> google.protobuf.Timestamp
	34, // 47: inventory.LGA.updated_at:type_name -> google.protobuf.Timestamp
	34, // 48: inventory.Inventory.created_at:type_name -> google.protobuf.Timestamp
	34, // 49: inventory.Inventory.updated_at:type_name -> google.protobuf.Timestamp
	27, // 50: inventory.Inventory.country:type_name -> inventory.Country
	28, // 51: inventory.Inventory.state:type_name -> inventory.State
	29, // 52: inventory.Inventory.lga:type_name -> inventory.LGA
	31, // 53: inventory.Inventory.images:type_name -> inventory.InventoryImage
	5,  // 54: inventory.Inventory.user:type_name -> inventory.User
	35, // 55: inventory.Inventory.tags:type_name -> google.protobuf.StringValue
	10, // 56: inventory.Inventory.category:type_name -> inventory.CategoryResponse
	11, // 57: inventory.Inventory.sub_category:type_name -> inventory.SubCategoryResponse
	34, // 58: inventory.InventoryImage.created_at:type_name -> google.protobuf.Timestamp
	34, // 59: inventory.InventoryImage.updated_at:type_name -> google.protobuf.Timestamp
	30, // 60: inventory.InventoryCollection.inventories:type_name -> inventory.Inventory
	0,  // 61: inventory.InventoryService.GetUsers:input_type -> inventory.EmptyRequest
	8,  // 62: inventory.InventoryService.CreateInventory:input_type -> inventory.CreateInventoryRequest
	0,  // 63: inventory.InventoryService.GetCategories:input_type -> inventory.EmptyRequest
	0,  // 64: inventory.InventoryService.GetSubCategories:input_type -> inventory.EmptyRequest
	33, // 65: inventory.InventoryService.GetCategory:input_type -> inventory.GetCategoryByIDPayload
	1,  // 66: inventory.InventoryService.GetCategorySubcategories:input_type -> inventory.ResourceId
	14, // 67: inventory.InventoryService.RateInventory:input_type -> inventory.InventoryRatingRequest
	16, // 68: inventory.InventoryService.RateUser:input_type -> inventory.UserRatingRequest
	2,  // 69: inventory.InventoryService.GetInventoryByID:input_type -> inventory.SingleInventoryRequestDetail
	4,  // 70: inventory.InventoryService.GetUserRatings:input_type -> inventory.GetResourceWithIDAndPagination
	4,  // 71: inventory.InventoryService.GetInventoryRatings:input_type -> inventory.GetResourceWithIDAndPagination
	23, // 72: inventory.InventoryService.ReplyInventoryRating:input_type -> inventory.ReplyToRatingRequest
	23, // 73: inventory.InventoryService.ReplyUserRating:input_type -> inventory.ReplyToRatingRequest
	26, // 74: inventory.InventoryService.SearchInventory:input_type -> inventory.SearchInventoryRequest
	6,  // 75: inventory.InventoryService.GetUsers:output_type -> inventory.UserListResponse
	9,  // 76: inventory.InventoryService.CreateInventory:output_type -> inventory.CreateInventoryResponse
	12, // 77: inventory.InventoryService.GetCategories:output_type -> inventory.AllCategoryResponse
	13, // 78: inventory.InventoryService.GetSubCategories:output_type -> inventory.AllSubCategoryResponse
	10, // 79: inventory.InventoryService.GetCategory:output_type -> inventory.CategoryResponse
	13, // 80: inventory.InventoryService.GetCategorySubcategories:output_type -> inventory.AllSubCategoryResponse
	15, // 81: inventory.InventoryService.RateInventory:output_type -> inventory.InventoryRatingResponse
	17, // 82: inventory.InventoryService.RateUser:output_type -> inventory.UserRatingResponse
	18, // 83: inventory.InventoryService.GetInventoryByID:output_type -> inventory.InventoryResponseDetail
	20, // 84: inventory.InventoryService.GetUserRatings:output_type -> inventory.UserRatingsResponse
	21, // 85: inventory.InventoryService.GetInventoryRatings:output_type -> inventory.InventoryRatingsResponse
	24, // 86: inventory.InventoryService.ReplyInventoryRating:output_type -> inventory.ReplyToRatingResponse
	24, // 87: inventory.InventoryService.ReplyUserRating:output_type -> inventory.ReplyToRatingResponse
	32, // 88: inventory.InventoryService.SearchInventory:output_type -> inventory.InventoryCollection
	75, // [75:89] is the sub-list for method output_type
	61, // [61:75] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_inventory_inventory_proto_init() }
func file_inventory_inventory_proto_init() {
	if File_inventory_inventory_proto != nil {
		return
	}
	file_inventory_inventory_proto_msgTypes[5].OneofWrappers = []any{}
	file_inventory_inventory_proto_msgTypes[10].OneofWrappers = []any{}
	file_inventory_inventory_proto_msgTypes[11].OneofWrappers = []any{}
	file_inventory_inventory_proto_msgTypes[30].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_inventory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_inventory_proto_goTypes,
		DependencyIndexes: file_inventory_inventory_proto_depIdxs,
		MessageInfos:      file_inventory_inventory_proto_msgTypes,
	}.Build()
	File_inventory_inventory_proto = out.File
	file_inventory_inventory_proto_rawDesc = nil
	file_inventory_inventory_proto_goTypes = nil
	file_inventory_inventory_proto_depIdxs = nil
}
